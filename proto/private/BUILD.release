load("@rules_proto//proto:defs.bzl", "proto_lang_toolchain")

# Use precompiled binaries where possible.
alias(
    name = "protoc",
    actual = "@com_github_protocolbuffers_protobuf//:protoc",
    visibility = ["//visibility:public"],
)

# Use the jars from maven.
alias(
    name = "protobuf_java",
    actual = "@com_google_protobuf_protobuf_java//jar",
    visibility = ["//visibility:public"],
)

alias(
    name = "protobuf_java_util",
    actual = "@com_google_protobuf_protobuf_java_util//jar",
    visibility = ["//visibility:public"],
)

alias(
    name = "protobuf_javalite",
    actual = "@com_google_protobuf_protobuf_javalite//jar",
    visibility = ["//visibility:public"],
)

proto_lang_toolchain(
    name = "java_toolchain",
    command_line = "--java_out=$(OUT)",
    runtime = ":protobuf_java",
    visibility = ["//visibility:public"],
)

proto_lang_toolchain(
    name = "javalite_toolchain",
    command_line = "--java_out=lite:$(OUT)",
    runtime = ":protobuf_javalite",
    visibility = ["//visibility:public"],
)

# Redirect everything else to the source
redirect_targets = [
    "wrappers_proto",
    "well_known_protos",
    "timestamp_proto",
    "struct_proto",
    "python_specific_test_protos_genproto",
    "python_common_test_protos_genproto",
    "protobuf_python_genproto",
    "protobuf_python",
    "protobuf_objc",
    "protobuf_headers",
    "objectivec",
    "field_mask_proto",
    "empty_proto",
    "duration_proto",
    "compiler_plugin_proto",
    "descriptor_proto",
    "cc_wkt_protos",
    "cc_toolchain",
    "cc_test_protos_genproto",
    "cc_wkt_protos_genproto",
    "api_proto",
    "type_proto",
    "source_context_proto",
    "any_proto",
    "protoc_lib",
    "protobuf",
]

[
    alias(
        name = target,
        actual = "@com_github_protocolbuffers_protobuf//:" + target,
        visibility = ["//visibility:public"],
    )
    for target in redirect_targets
]

